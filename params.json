{"name":"Annokey","tagline":"Annotation of gene lists with keyword hits from the NCBI gene database and PubMed abstracts","body":"### Introduction\r\n\r\nAnnokey is a command line tool for annotating gene lists with the results of a keyword (or key phrase) search of the [NCBI Gene database](http://www.ncbi.nlm.nih.gov/gene) and linked [PubMed](http://www.ncbi.nlm.nih.gov/pubmed) article abstracts. Its purpose is to help users prioritise genes  by relevance to a domain of interest, such as \"breast cancer\" or \"DNA repair\" etc. The user steers the search by specifying a ranked list of keywords and terms that are likely to be highly correlated with their domain of interest.\r\n\r\n### Features\r\n\r\nAnnokey's main features are:\r\n\r\n###### Online and offline search\r\n\r\n* Online search access the NCBI databases directly over a network connection. Pros: you get the latest, must up-to-date information. Cons: retrieving lots of data over the network can be relatively slow.\r\n* Offline search utilises Annokey's local cache of the NCBI databases. Pros: searching the local cache is much faster than online search, and does not need a network connection. Cons: the cache data may be incomplete or not up-to-date.\r\n\r\nThe NCBI provides an entire copy of the gene database in XML format at [ftp.ncbi.nlm.nih.gov](ftp.ncbi.nlm.nih.gov). Annokey can use this XML file to automatically populate its local cache. We also provide a tool called `genetoxml.py` for automatically downloading this XML copy of the database.\r\n\r\n##### Flexible search terms\r\n\r\nSearch terms can be specified as literal terms or as regular expressions.\r\n\r\n* Literal terms are easy to use but an exact match must be found in the database. Sometimes exact match is too restrictive, for example due to issues with upper and lower case letters.\r\n* Regular expressions are much more flexible than literal terms, but they require more expertise from the user.\r\n\r\n###### Search results reported in summary and detailed form\r\n\r\n The search results are provided in summary form, as extra annotations to the input gene list, and also in a more detailed report, as a HTML document.\r\n\r\n* Summary annotations provide a quick overview of the relevance of a key phrase to a gene, and can be incorporated into a workflow using spreadsheets.\r\n* The detailed report provides more information than the summary, and contains hyperlinks back to the online NCBI databases for easy reference.\r\n\r\n### Inputs and Outputs\r\n\r\nAnnokey's main inputs are:\r\n\r\n1. A CSV file representing a set of genes, one gene per row.\r\n2. A list of search terms sorted in descending order of priority.\r\n\r\nAnnokey's main outputs are:\r\n\r\n1. A CSV file representing an annotated version of the input CSV file. Each row of the CSV file (representing a given gene) is given three extra columns summarising the search results. The extra columns are explained below in an example.\r\n2. A HTML report file showing more detailed search results for each gene. This includes hyper-links back to the relevant entries in the NCBI website for easy follow-up investigation.\r\n\r\n###### Simple example of inputs and outputs\r\n\r\nFor example, if your input gene CSV file contains the following rows:\r\n\r\n    Gene\r\n    XRCC2\r\n    PALB2\r\n    BRCA1\r\n\r\nand your input search term file contains the following lines:\r\n\r\n    DNA repair\r\n    breast cancer\r\n\r\nthe output CSV file produced by Annokey will look like this:\r\n\r\n```\r\nGene,Highest Ranked Match,Matched Terms,Fields\r\nXRCC2,1,DNA repair;breast cancer,Process;GeneRIFs(8/33);Alternative Name\r\nPALB2,1,DNA repair;breast cancer,Process;GeneRIFs(37/78);GeneRIFs(2/78);PMID(2/192);Summary\r\nBRCA1,1,DNA repair;breast cancer,GeneRIFs(28/1275);Description;PMID(4/3698);Process;GeneRIFs(342/1275);Summary;Alternative Name;PMID(19/3698)\r\n```\r\n\r\nAs you can see the output contains a lot of detail about each search term match. Consider the first case for XRCC2:\r\n\r\n```\r\nXRCC2,1,DNA repair;breast cancer,Process;GeneRIFs(8/33);Alternative Name\r\n```\r\n\r\nIn addition to the gene name, the output row contains three extra columns:\r\n\r\n1. Highest Ranked Match: the rank of the highest-ranked search term which was found in the search. In this case the rank is 1, which corresponds to the rank of the search term \"DNA repair\". Search terms are ranked according to their order in the search terms file. The term on the first line is highest ranked (most important), followed by the second line, and so on.\r\n2. Matched Terms: a list of all the search terms which matched this particular gene. In this case the terms \"DNA repair\" and \"breast cancer\" were found.\r\n3. Fields: the locations in the NCBI gene entry where the search terms were found. In this case the search terms were found in \"Process\", \"GeneRIFs(8/33)\" and \"Alternative Name\".\r\n\r\n#### Input formatting requirements\r\n\r\n###### The input CSV file must be formatted as follows:\r\n\r\n* The file may be comma or tab separated. Annokey looks at the filename extension to guess what format is used (\".csv\" for comma separated files, \".tsv\" for tab separated files) but you may override this with the `--delimiter {comma|tab}` command line argument.\r\n* The first row in the file must be a header row.\r\n* Each row may have one or more columns. One of the columns must contain the gene name, and the header for that row must be \"Gene\".\r\n\r\nHere is an example valid gene file in comma separated format:\r\n\r\n```\r\nSample,Study,Gene,Variant\r\ns100,XYZ,BRCA1,snp\r\ns100,XYZ,XRCC2,indel\r\ns888,ABC,PALB2,snp\r\ns100,ABC,CHECK2,snp\r\n```\r\n\r\nNotice that there are multiple columns in each row. The only column that Annokey considers is the one with the header \"Gene\".\r\n\r\nAnnokey will preserve the other columns in its output, and add its own annoations at the end of each row.\r\n\r\n###### The search term file must be formatted as follows:\r\n\r\n* Each search term must appear on a separate line.\r\n* A search term may be either a literal phrase or a regular expression.\r\n* Literal phrases may contain one or more words. Literal phrases are matched exactly by Annokey. This includes character case. For example \"DNA\" is considered to be different to \"dna\".\r\n* Regular expressions must start with the word \"regex\" and then be followed by a valid Python regular expression. The [Python regular expression HOWTO](http://docs.python.org/2/howto/regex.html) provides a good tutorial on the topic.\r\n* Search terms are ranked based on their relative order in the file. The search term on line 1 has rank 1 and so on. Thus the most important search term appears on the first line of the file. The second most important term appears on the second line, and so forth.\r\n\r\nA literal search term might look like this:\r\n\r\n```\r\nbreast cancer\r\n```\r\n\r\nA regular expression search term might look like this:\r\n\r\n```\r\nregex [Bb]reast [Cc]ancer(s)?\r\n```\r\n\r\nThis regular expression is more flexible because it will match with upper and lower case characters at the start of each word, and it also allows for an optional \"s\" at the end of the second word.\r\n\r\n### Installation\r\n\r\nAnnokey currently requires version 2.7 of Python.\r\n\r\nThe best way to install Annokey is to use the following command:\r\n\r\n    pip install git+https://github.com/bjpop/annokey.git\r\n\r\nThis will automatically download and install the dependencies of Annokey.\r\n\r\n### Online versus offline search\r\n\r\nAnnokey obtains its search results by querying the NCBI gene database. It can access that data in two ways:\r\n\r\n1. By sending queries to the online database via the Entrez programming interface.\r\n2. By searching in a locally cached copy of the data.\r\n\r\nOnline queries give you access to the most up-to-date version of the database, but at the cost of being much slower, and requiring an internet connection. The offline version searches in a local copy of the database stored on your computer. Offline search is potentially much faster than online search and does not need an internet access. However, your local copy of the database may not necessarily contain the most up-to-date data.\r\n\r\nAnnokey automatically keeps a local cache of any data retrieved from an online search. This allows you to incrementally accumulate a local copy of parts of the database, without having to download the entire thing in advance.\r\n\r\nBy default Annokey keeps its cache of the NCBI Gene Database in a directory called `genecache`, however you can specify an alternative location via the `--genecache DIR` command line argument. The structure of the cache directory is discussed in the technical details section below.\r\n\r\n### How to use Annokey from the command line\r\n\r\nYou can get help about the Annokey command line by using `annokey -h` (or `--help`), which will produce this output:\r\n\r\n```\r\nusage: annokey [-h] [--version] [--online] [--xml FILE] [--organism ORGANISM]\r\n               [--email EMAIL_ADDRESS] [--genecache DIR] [--pubmedcache DIR]\r\n               --terms FILE --genes FILE [--log FILENAME]\r\n               [--delimiter {comma,tab}] [--report FILENAME]\r\n\r\nSearch NCBI for genes of interest, based on concept-keyword search.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --version             show program's version number and exit\r\n  --online              Search gene information from online (NCBI).\r\n  --xml FILE            Populate gene information from downloaded XML dump of\r\n                        NCBI gene database\r\n  --organism ORGANISM   Name of the organism to search\r\n  --email EMAIL_ADDRESS\r\n                        Your email address. This is required by NCBI for\r\n                        online queries. You do not need to supply an email\r\n                        address for cached queries.\r\n  --genecache DIR       Save a cache of the downloaded results from NCBI gene\r\n                        into this directory\r\n  --pubmedcache DIR     Save a cache of the downloaded results from NCBI\r\n                        pubmed into this directory\r\n  --terms FILE          The tab separated file containing the search-terms to\r\n                        be searched.\r\n  --genes FILE          The tab separated file containing the gene information\r\n                        including name of the gene, one gene name per line.\r\n  --log FILENAME        log progress in FILENAME, defaults to annokey_log.txt\r\n  --delimiter {comma,tab}\r\n                        Delimiter for gene file.\r\n  --report FILENAME     Save a detailed search report as HTML page, defaults\r\n                        to annokey_report.html\r\n```\r\n\r\n###### Required arguments\r\n\r\nAnnokey requires two arguments `--terms` and `--genes`, which define the search terms and gene list respectively. The remaining arguments are optional. \r\n\r\nAnnokey's default mode is to use local \"offline\" search in a cached copy of the NCBI Gene database. For example, if the file `terms.txt` contains a list of search terms and the file `genes.csv` contains the gene information, then the following command is sufficient to perform a search:\r\n\r\n    annokey --terms terms.txt --genes genes.csv\r\n\r\n###### Saving the annotated output to a file\r\n\r\nAnnokey produces a new gene file on standard output, which you will normally want to redirect to a file:\r\n\r\n    annokey --terms terms.txt --genes genes.csv > annotated_genes.csv\r\n\r\n###### Log file\r\n\r\nAs a side-effect, Annokey will produce a log file which contains useful information about the progress of the search. By default this is written to the file `annokey_log.txt`, but you can override that with the `--log` argument:\r\n\r\n    annokey --terms terms.txt --genes genes.csv --log mylogfile.txt\r\n\r\nOne of the more useful aspects of the log file is that it records the command line that was used to execute the program. This can come in handy if you want to run the same command again, but you forgot what the arguments were.\r\n\r\n###### Online search\r\n\r\nThe effectiveness of offline search depends greatly on the status of your local cache of the NCBI gene database.\r\n\r\nAlternatively, Annokey can be made to perform an online search with the `--online` argument. This argument also requires you to specify an email address (as per requirements of the NCBI Gene database):\r\n\r\n    annokey --online --email foo@bar.com --terms terms.txt --genes genes.csv\r\n\r\nObviously you should use a real email address instead of `foo@bar.com`.\r\n\r\n###### Organism\r\n\r\nBy default Annokey uses the human version of the NCBI Gene database, but you can specify an alternative organism with the `--organism` argument:\r\n\r\n    annokey --organism mouse --terms terms.txt --genes genes.csv\r\n\r\n###### Gene file delimiter\r\n\r\nIf there are multiple columns in the genes file then they can be separated by either commas (so-called CSV format) or tabs (so-called TSV format). If the filename ends in \".csv\" then Annokey will assume that the file is in CSV format. If the filename ends in \".tsv\" then Annokey will assume that the file is in TSV format. However, you can override this behaviour by specifying the desired format using the `--delimiter` command line argument. The value of `--delimiter` can be either `comma` or `tab`, for example:\r\n\r\n    annokey --terms terms.txt --genes genes.txt --delimiter comma\r\n\r\nor\r\n\r\n    annokey --terms terms.txt --genes genes.txt --delimiter tab\r\n\r\n### Technical details\r\n\r\nThe structure of the gene cache directory is as follows:\r\n\r\n    genecache\r\n        organism (e.g. human, mouse)\r\n            hash_dir (a numbered directory in the range [0,255])\r\n                gene_name (e.g. PALB2)\r\n                    gene_id (XML file, e.g 79728)\r\n\r\nAt the top level is the genecache directory. This has sub-directories for each organism. This has up to 256 sub-directories numbered 0 to 255. The purpose of these sub-directories is to spread out the stored gene information, so that we don't put all the gene files in one sub-directory. Some computer file systems exhibit poor performance when you put too many files in one directory.\r\n\r\nThe database records for each gene are stored underneath one of the 256 possible hash directories. The exact hash directory is determined by the formula:\r\n\r\n    md5(gene_name) % 256\r\n\r\nwhere `gene_name` is the (string) gene name (such as \"PALB2\"), md5 is a hash function and % is the modulus operator. We are only using md5 as a way to evenly distribute gene names to directories, so we don't care about its cryptographic properties (particularly its known weaknesses). \r\n\r\nFor example, the entry for PALB2 is calculated as follows:\r\n\r\n    md5(\"PALB2\") % 256 = 163\r\n\r\nWhich means that PALB2 will be found in genecache/human/163/PALB2/79728. The actual data is stored in the file called 79728, which is in XML format. The number 79728 is the NCBI Gene database ID of the PALB2, which is also reflected in the URL to access the entry in the online database [http://www.ncbi.nlm.nih.gov/gene/79728](http://www.ncbi.nlm.nih.gov/gene/79728).\r\n\r\nAlso note that we normalise the gene name when it is stored in the cache to be all uppercase characters, which means we can reliably find the gene regardless of how it was written in the input gene file or stored in the NCBI database.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}