{"name":"Annokey","tagline":"Gene-based search for key-terms in the NCBI gene database and associated PubMed abstracts","body":"# 1. Introduction\r\n\r\nAnnokey is a command line tool for annotating gene lists with the results of a key-term search of the [NCBI Gene database](http://www.ncbi.nlm.nih.gov/gene) and linked [PubMed](http://www.ncbi.nlm.nih.gov/pubmed) article abstracts. Its purpose is to help users prioritise genes  by relevance to a domain of interest, such as \"breast cancer\" or \"DNA repair\" _etcetera_. The user steers the search by specifying a ranked list of keywords and terms that are likely to be highly correlated with their domain of interest.\r\n\r\n# 2. License\r\n\r\nAnnokey is open source software, released under the [3-clause BSD license](https://github.com/bjpop/annokey/blob/master/LICENSE.txt).\r\n\r\n# 3. Quick start guide\r\n\r\n* Install Annokey on your computer; see Section 4 below.\r\n* Prepare your two input files: 1) a genes file in CSV format and 2) a key-terms file in text format. See Section 6 for more details about the inputs.\r\n* Choose between online and offline mode. See Section 7 for more detail about the differences.\r\n    * Online mode is suitable for a relatively short number of genes  (< 100).\r\n    * Offline mode is suitable for relatively large number of genes (>= 100) or in cases where you plan to do lots of searches.\r\n\r\n##### Quick start online mode\r\n\r\n* Run annokey on the inputs and save the output (replace `user@example.com` with your real email address):\r\n\r\n```\r\nannokey --genes genes.csv --terms terms.txt --online --email user@example.com > genes_out.csv\r\n```\r\n\r\n##### Quick start offline mode\r\n\r\n* Populate the gene cache from the NCBI snapshot. See section 9 for how to do this.\r\n* Run annokey on the inputs and save the output:\r\n\r\n```\r\nannokey --genes genes.csv --terms terms.txt > genes_out.csv\r\n```\r\n\r\n##### Quick start PubMed\r\n\r\nAnnokey can optionally search for the key-terms in the PubMed article titles and abstracts which are linked from the records in the NCBI Gene database. PubMed search can be used with both online and offline modes of Annokey. Note that PubMed search can significantly increase the search time, so it is not turned on by default. PubMed search may require Annokey to access data online which requires you to supply an email address.\r\n\r\nHere is the online example command from above extended with PubMed search:\r\n\r\n```\r\nannokey --genes genes.csv --terms terms.txt --pubmed --online --email user@example.com > genes_out.csv\r\n```\r\n\r\nHere is the offline example command from above extended with PubMed search (note the email address is still required):\r\n\r\n```\r\nannokey --genes genes.csv --terms terms.txt --pubmed --email user@example.com > genes_out.csv\r\n```\r\n\r\n\r\n# 4. Installation\r\n\r\nAnnokey currently requires version 2.7 of Python.\r\n\r\nThe best way to install Annokey is to use the following command:\r\n\r\n    pip install git+https://github.com/bjpop/annokey.git\r\n\r\nThis will automatically download and install the dependencies of Annokey.\r\n\r\n# 5. Features\r\n\r\nAnnokey's main features are:\r\n\r\n### Online and offline search\r\n\r\n* Online search of the NCBI databases directly over a network connection. Pros: you get the latest up-to-date information. Cons: retrieving lots of data over the network can be relatively slow.\r\n* Offline search utilises Annokey's local cache of the NCBI databases. Pros: searching the local cache is much faster than online search and does not need a network connection. Cons: the cache data may be incomplete or out of date.\r\n\r\nThe NCBI provides an entire copy of the gene database in XML format at [ftp.ncbi.nlm.nih.gov](ftp.ncbi.nlm.nih.gov). Annokey can use this XML file to automatically populate its local cache. We also provide a tool called `get_ncbi_gene_snapshot_xml.py` (described in Section 9 below) for automatically downloading this XML copy of the database.\r\n\r\n### Flexible search terms\r\n\r\nSearch terms can be specified as literal terms or as regular expressions.\r\n\r\n* Literal terms are easy to use but an exact match must be found in the database. Sometimes exact match is too restrictive, for example, issues with upper- and lower-case letters.\r\n* Regular expressions are much more flexible than literal terms, but they require more expertise from the user.\r\n\r\n### Search results reported in summary and detailed form\r\n\r\n The search results are provided in summary form, as extra annotations to the input gene list, and also in a more detailed report, as a HTML document. An example report is shown in Section 6.\r\n\r\n* Summary annotations provide a quick overview of the relevance of a key phrase to a gene, and can be incorporated into a workflow using spreadsheets.\r\n* The detailed report provides more information than the summary, and contains hyperlinks back to the online NCBI databases for easy reference.\r\n\r\n# 6. Inputs and outputs\r\n\r\nAnnokey's main inputs are:\r\n\r\n1. A CSV file representing a set of genes, one gene per row. Rows may contain other arbitrary columns, but one column must contain the gene name.\r\n2. A list of search terms sorted in descending order of priority.\r\n\r\nAnnokey's main outputs are:\r\n\r\n1. A CSV file representing an annotated version of the input CSV file. Each row of the CSV file (representing a given gene) is given three extra columns summarising the search results. The extra columns are explained below in an example.\r\n2. A HTML report file showing more detailed search results for each gene. This includes hyperlinks back to the relevant entries in the NCBI website for easy follow-up investigation, plus detailed lists containing the context of each key-term match in each field.\r\n\r\n###### Simple example of inputs and outputs\r\n\r\nFor example, if your input gene CSV file contains the following rows (this is an intentionally simple example, real data will often contain more columns on each row):\r\n\r\n    Gene\r\n    XRCC2\r\n    PALB2\r\n    BRCA1\r\n\r\nand your input search term file contains the following lines:\r\n\r\n    DNA repair\r\n    breast cancer\r\n\r\nthe output CSV file produced by Annokey will look like this:\r\n\r\n```\r\nGene,Highest Rank,Highest Rank Term,Total Matched Entries\r\nXRCC2,1,DNA repair,11\r\nPALB2,1,DNA repair,48\r\nBRCA1,1,DNA repair,408\r\n```\r\n\r\nConsider the first case, for XRCC2:\r\n\r\n```\r\nXRCC2,1,DNA repair,11\r\n```\r\n\r\nIn addition to the gene name, the output row contains three extra columns:\r\n\r\n1. Highest Rank: the rank of the highest-ranked search term which was found in the search. In this case the rank is 1, which corresponds to the rank of the search term \"DNA repair\". Search terms are ranked according to their order in the search terms file. The term on the first line is highest ranked (most important), followed by the second line, and so on.\r\n2. Highest Rank Term: this is the search-term corresponding to the highest ranked match. In the above example the highest ranked matching term is \"DNA repair\".\r\n3. Total Matched Entries: the sum of the number of database fields matched for every search term. For each search term we count the number of database fields where the term is matched, and then sum them for all terms. If two different terms match in the same field we still count them separately. This number gives you a crude measure of how closely related a given gene is to the entire collection of search terms.\r\n\r\nBelow is a screen shot of the search report generated for the example above. You can see that the report is much more detailed than the CSV annotations. The report is divided into genes. Each gene report contains a table showing all the matches for each search term. The rank of each matching search term is shown in the table, along with a list of database fields where the term matched, and the corresponding frequency of matches in those fields are shown in brackets.\r\n\r\n![Screen shot of Annokey's search result report](https://raw.github.com/bjpop/annokey/master/images/annokey_screen.png)\r\n\r\n#### Input formatting requirements\r\n\r\n###### The input CSV file must be formatted as follows:\r\n\r\n* The file may be comma or tab separated. Annokey looks at the filename extension to guess what format is used (\".csv\" for comma separated files, \".tsv\" for tab separated files) but you may override this with the `--delimiter {comma|tab}` command line argument.\r\n* The first row in the file must be a header row.\r\n* Each row may have one or more columns. One of the columns must contain the gene name, and the header for that row must be \"Gene\". Annokey assumes that you will use the standard gene names that appear in the Gene database ([NCBI gene database nomenclature](http://www.ncbi.nlm.nih.gov/books/NBK3840/#genefaq.Nomenclature).\r\n\r\nHere is an example valid gene file in comma separated format:\r\n\r\n```\r\nSample,Study,Gene,Variant\r\ns100,XYZ,BRCA1,snp\r\ns100,XYZ,XRCC2,indel\r\ns888,ABC,PALB2,snp\r\ns100,ABC,CHECK2,snp\r\n```\r\n\r\nNotice that there are multiple columns in each row. Annokey only requires the \"Gene\" column, the other columns are ignored as far as the search is concerned, but are preserved in the output file.\r\n\r\n###### The search terms file must be formatted as follows:\r\n\r\n* Each search term must appear on a separate line.\r\n* A search term is a regular expression, using the Python regular expression syntax. The [Python regular expression HOWTO](http://docs.python.org/2/howto/regex.html) provides a good tutorial on the topic.\r\n* The simplest kind of regular expression is just a collection of one or more literal words, such as \"breast cancer\". This kind of term will match exactly the text in the term and nothing else. For example \"DNA\" will not match \"dna\" because they are not an exact match.\r\n* More complex regular expressions can be used to make matching more flexible. For example \"[Bb]reast [Cc]ancer\" will match \"Breast Cancer\", \"Breast cancer\", \"breast Cancer\" and \"breast cancer\".\r\n* Search terms are ranked based on their relative order in the file. The search term on line 1 has rank 1 and so on. Thus the most important search term appears on the first line of the file. The second most important term appears on the second line, and so forth.\r\n\r\nA literal search term might look like this:\r\n\r\n```\r\nbreast cancer\r\n```\r\n\r\nA regular expression search term might look like this:\r\n\r\n```\r\n[Bb]reast [Cc]ancer(s)?\r\n```\r\n\r\nThis regular expression is more flexible because it will match with upper and lower case characters at the start of each word, and it also allows for an optional \"s\" at the end of the second word.\r\n\r\n# 7. Online versus offline search\r\n\r\nAnnokey obtains its search results by querying the NCBI gene database and the linked PubMed article abstracts. It can access the data in two ways:\r\n\r\n1. By sending queries to the online database via the [Entrez](http://en.wikipedia.org/wiki/Entrez) programming interface.\r\n2. By searching in a locally cached copy of the data.\r\n\r\nOnline queries give you access to the most up-to-date version of the database, but at the cost of being much slower, and requiring an internet connection. The offline version searches in a local copy of the database stored on your computer. Offline search is potentially much faster than online search and does not need an internet access. However, your local copy of the database may not necessarily contain the most up-to-date data.\r\n\r\nAnnokey treats the Gene cache and the PubMed cache differently for these reasons:\r\n1. PubMed is much larger than the Gene database. It is easy to download an entire copy of the Gene database, but less so for PubMed. Also PubMed has stricter licensing conditions than Gene.\r\n2. Existing PubMed database entries are unlikely to be modified, the opposite is true for existing Gene database entries.\r\n\r\nFor these reasons Annokey allows you to populate a local cache with a copy of the entire Gene database for a given organism, but it does not allow you to do the same with PubMed. If you specify the \"--pubmed\" command line argument, Annokey will collect all the PubMed references made from each gene entry, and fetch all (and only) those PubMed articles directly from NCBI. However, it will keep a local cache of any previously requested PubMed articles and avoid downloading them again, to avoid the time delay introduced by the network request, and to reduce the load on the PubMed server.\r\n\r\nBy default Annokey keeps its cache of the NCBI Gene Database in a directory called `genecache`, and a cache of the PubMed article summaries in `pubmedcache`, however you can specify an alternative locations via the `--genecache DIR` and `--pubmedcache DIR` command line arguments. The structure of the cache directories is discussed in the technical details section below.\r\n\r\n# 8. How to use Annokey from the command line\r\n\r\nYou can get help about the Annokey command line by using `annokey -h` (or `--help`), which will produce this output:\r\n\r\n```\r\nusage: annokey [-h] [--version] [--online] [--cachesnapshot FILE]\r\n               [--organism ORGANISM] [--email EMAIL_ADDRESS] [--genecache DIR]\r\n               [--pubmedcache DIR] [--terms FILE] [--genes FILE]\r\n               [--log FILENAME] [--delimiter {comma,tab}] [--report FILENAME]\r\n               [--pubmed]\r\n\r\nSearch NCBI for genes of interest, based on concept-keyword search.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --version             show program's version number and exit\r\n  --online              Search gene information from online (NCBI).\r\n  --cachesnapshot FILE  Populate the gene cache from downloaded XML snapshot\r\n                        of NCBI gene database\r\n  --organism ORGANISM   Name of the organism to search\r\n  --email EMAIL_ADDRESS\r\n                        Your email address. This is required by NCBI for\r\n                        online queries. You do not need to supply an email\r\n                        address for cached queries.\r\n  --genecache DIR       Save a cache of the downloaded results from NCBI gene\r\n                        into this directory\r\n  --pubmedcache DIR     Save a cache of the downloaded results from NCBI\r\n                        pubmed into this directory\r\n  --terms FILE          The tab separated file containing the search terms to\r\n                        be searched.\r\n  --genes FILE          The tab separated file containing the gene information\r\n                        including name of the gene, one gene name per line.\r\n  --log FILENAME        log progress in FILENAME, defaults to annokey_log.txt\r\n  --delimiter {comma,tab}\r\n                        Delimiter for gene file.\r\n  --report FILENAME     Save a detailed search report as HTML page, defaults\r\n                        to annokey_report.html\r\n  --pubmed              Search titles and abstracts in Pubmed entries referred\r\n                        to in each gene entry\r\n```\r\n\r\n###### Required arguments\r\n\r\nAnnokey requires two arguments `--terms` and `--genes`, which define the search terms and gene list respectively. The remaining arguments are optional. \r\n\r\nAnnokey's default mode is to use local offline search in a cached copy of the NCBI Gene and PubMed databases. For example, if the file `terms.txt` contains a list of search terms and the file `genes.csv` contains the gene information, then the following command is sufficient to perform a search:\r\n\r\n    annokey --terms terms.txt --genes genes.csv\r\n\r\n###### Saving the annotated output to a file\r\n\r\nAnnokey produces a new gene file on standard output. You can save this output to a file using the Unix shell redirection operator \">\":\r\n\r\n    annokey --terms terms.txt --genes genes.csv > annotated_genes.csv\r\n\r\n###### Search report file\r\n\r\nAnnokey saves a detailed search report in a HTML file. By default this file is called `annokey_report.html` but you can specify another name using the `--report` argument:\r\n\r\n    annokey --report mylogfile.txt --terms terms.txt --genes genes.csv \r\n\r\n###### Log file\r\n\r\nAs a side-effect, Annokey will produce a log file which contains useful information about the progress of the search. For instance, the log file will record the names of any genes that it could not find in the local cache. By default the log file is written to the file `annokey_log.txt`, but you can override that with the `--log` argument:\r\n\r\n    annokey --log mylogfile.txt --terms terms.txt --genes genes.csv \r\n\r\nThe log file also records the command line that was used to execute the program. This can come in handy if you want to run the same command again, but you forgot what the arguments were.\r\n\r\n###### Online search\r\n\r\nThe effectiveness of offline search depends greatly on the status of your local cache of data.\r\n\r\nAlternatively, Annokey can be made to perform an online search with the `--online` argument. This argument also requires you to specify an email address (as per requirements of the NCBI Gene database):\r\n\r\n    annokey --online --email user@example.com --terms terms.txt --genes genes.csv\r\n\r\nObviously you should use a real email address instead of `user@example.com`.\r\n\r\n###### Organism\r\n\r\nBy default Annokey uses the human version of the NCBI Gene database, but you can specify an alternative organism with the `--organism` argument:\r\n\r\n    annokey --organism mouse --terms terms.txt --genes genes.csv\r\n\r\n###### Gene file delimiter\r\n\r\nMultiple columns in the genes input file can be separated by either commas (so-called CSV format) or tabs (so-called TSV format). If the filename ends in \".csv\" then Annokey will assume that the file is in CSV format. If the filename ends in \".tsv\" then Annokey will assume that the file is in TSV format. However, you can override this behaviour by specifying the desired format using the `--delimiter` command line argument. The value of `--delimiter` can be either `comma` or `tab`, for example:\r\n\r\n    annokey --delimiter comma --terms terms.txt --genes genes.txt \r\n\r\nor\r\n\r\n    annokey --delimiter tab --terms terms.txt --genes genes.txt \r\n\r\n\r\n###### PubMed article search\r\n\r\nEach Gene database entry contains zero or more links to related PubMed articles which are somehow closely related to the given gene. Annokey will search for key terms in the linked Pubmed article titles and summaries if you specify the `--pubmed` flag:\r\n\r\n    annokey --pubmed --email user@example.com --terms terms.txt --genes genes.txt\r\n\r\nAnnokey may need to request PubMed articles from the online database, so you must also specify your email address whenever you use the `--pubmed` flag. Obviously you should use your real email address instead of the example `user@example.com`.\r\n\r\nTo reduce the number of network requests to the PubMed online databse Annokey caches each PubMed entry. Future searches of the same article will find it in the cache. This improves the speed of the search and also reduces network traffic.\r\n\r\nIf Annokey cannot find a particular PubMed entry it will make a note in the logfile and continue searching. Therefore it is a good idea to check the logfile after each search to see whether anything was missed.\r\n\r\n# 9. Populating the gene cache with a complete download of NCBI gene\r\n\r\nXXX Put this in here:\r\n\r\n###### Using a snapshot of the NCBI gene database\r\n\r\nThe NCBI provides a complete snapshot of the gene database which is updated regularly. Annokey can use this snapshot to automatically populate its local cache of the data. In many cases this is the most efficient way to use Annokey. Details about how to obtain a snapshot of the database are provided below.\r\n\r\n    annokey --terms terms.txt --genes genes.csv --xml Homo_sapiens_20140116041343.xml\r\n\r\nIn the example above the snapshot is stored in the file called Homo_sapiens_20140116041343.xml. It stores a record for each gene in the human database.\r\nAnnokey will process the XML file and populate the local gene database cache. Future searches can just use the cache directly, and will be substantially faster.\r\n\r\nUnfortunately there is no corresponding snapshot of the NCBI article summary database.\r\n\r\nSnapshots of the NCBI gene database for different organisms are provided on the [NCBI ftp site](ftp://ftp.ncbi.nih.gov/gene/DATA/). The snapshot is stored in a compressed binary format which can be converted to XML using a tool called [gene2xml](ftp://ftp.ncbi.nih.gov/asn1-converters/by_program/gene2xml/).\r\n\r\nThe process of downloading and converting the database snapshot is rather convoluted so we provide a command line tool called `get_ncbi_gene_snapshot_xml.py` to automate the process. It requires that you have a copy of the `gene2xml` program in your PATH. You can run the program like so:\r\n\r\n```\r\nget_ncbi_gene_snapshot_xml.py\r\n```\r\n\r\nthe output will look like this:\r\n\r\n```\r\nStarts connecting to server (ftp.ncbi.nlm.nih.gov).\r\n  >> Connecting to server is successful.\r\nStarts getting the last modified time of data.\r\n  >> Getting the last modified time of data is successful.\r\n  >> The last modified time of the data at the server is 20140116041343\r\nStarts downloading data from server.\r\n  >> The file size is 160.39M\r\n  >> Downloading...        100.00% \r\n  >> Downloading data is successful.\r\n  >> Homo_sapiens_20140116041343.ags.gz is stored.\r\nStarts converting Homo_sapiens_20140116041343.ags.gz to Homo_sapiens_20140116041343.xml.\r\n  >> Converting ...\r\n  >> Converting Homo_sapiens_20140116041343.ags.gz to Homo_sapiens_20140116041343.xml is successful.\r\nDone.\r\n```\r\n\r\nWhen it is complete you will have a file called `Homo_sapiens_N.xml` in your directory, where `N` is a number representing the date that the snapshot was taken. It should be several gigabytes in size (it was 12 gigabytes on 17 January 2014).\r\n\r\nIf you have an up-to-date snapshot of the database in the current directory then `get_ncbi_gene_snapshot_xml.py` will not download a new version:\r\n\r\n```\r\nStarts connecting to server (ftp.ncbi.nlm.nih.gov).\r\n  >> Connecting to server is successful.\r\nStarts getting the last modified time of data.\r\n  >> Getting the last modified time of data is successful.\r\n  >> The last modified time of the data at the server is 20140116041343\r\nYou already have the latest version of the file (Homo_sapiens_20140116041343.ags.gz).\r\nYou already have the latest version of the xml file (Homo_sapiens_20140116041343.xml).\r\nDone.\r\n```\r\n\r\nThe `get_ncbi_gene_snapshot_xml.py` program supports several command line arguments. You can view help information by running `get_ncbi_gene_snapshot_xml.py -h`:\r\n\r\n```\r\nusage: get_ncbi_gene_snapshot_xml.py [-h] [--verbose VERBOSE]\r\n                                     [--ftpsite FTPSITE]\r\n                                     [--filepath GENEFILEPATH] [--force]\r\n                                     [--downloadonly] [--convertonly GENEFILE]\r\n                                     [--gene2xmlpath PROGRAMPATH]\r\n\r\nThis program downloads gene data from the ftp server and converts data to\r\nxml file by using linux.gene2xml tool. This program checks the last modified\r\ntime of the database in the server, when it tries to download the gene\r\ndatabase from the server. If the same version of database is in the local\r\ndirectory already, this program does not download the database from server. If\r\nyou want to download the database anyway, please use the --force option. If\r\nyou already have the database file that you need to look up and want to\r\nconvert the file, please use the --convertonly option.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --verbose VERBOSE     Prints progress messages. The users have to pass the\r\n                        level of messages. 0: No progress messages. 1: Prints\r\n                        what stage the program is on. 2: Prints detail\r\n                        information on progress. 3: Prints callstack when\r\n                        error occurs.\r\n  --ftpsite FTPSITE     The ftp site to be connected for downloading gene\r\n                        database. Default is NCBI server\r\n                        (ftp.ncbi.nlm.nih.gov).\r\n  --filepath GENEFILEPATH\r\n                        The full file path in the ftp site that would be\r\n                        downloaded. The path should start from the root of the\r\n                        ftp site. For example, if you want to download gene\r\n                        database of Archaea from NCBI FTP site, you should\r\n                        pass\r\n                        /gene/DATA/ASN_BINARY/Archaea_Bacteria/Archaea.ags.gz\r\n                        as an argument value. Default is Homo sapiens\r\n                        (/gene/DATA/ASN_BINARY/Mammalia/Homo_sapiens.ags.gz)\r\n  --force               Downloads the latest version of data from the server\r\n                        without regarding the existing file on directory. If\r\n                        there is the same version in local directory, the file\r\n                        would be overwritten.\r\n  --downloadonly        Downloads the latest version of data from the server\r\n                        but not converts the file to xml.\r\n  --convertonly GENEFILE\r\n                        Converts the input file to xml.\r\n  --gene2xmlpath PROGRAMPATH\r\n                        The path where the gene2xml is in. If the path for\r\n                        linux.gene2xml is not in your PATH, you should pass\r\n                        this argument. For example, if linux.gene2xml is in\r\n                        /usr/local/gene2xml/1.3/bin and not in PATH , then you\r\n                        should pass either\r\n                        /usr/local/gene2xml/1.3/bin/linux.gene2xml or\r\n                        /usr/local/gene2xml/1.3/bin.\r\n```\r\n\r\n# 10. Technical details\r\n\r\n###### Which parts of NCBI gene and PubMed does Annokey search?\r\n\r\nAnnokey searches in the following sections of the NCBI gene database. The diagram below illustrates the parts of the NCBI Gene XML schema which are searched by Annokey. Comments in parenthesis provide additional remarks about how the data is processed and, where relevant, provides the \"field names\" that Annokey associates with the data:\r\n\r\n```\r\nEntrezgene\r\n    Entrezgene_track-info\r\n        Gene-track/Gene-track_status (we skip entries which are discontinued)\r\n    Entrezgene_gene\r\n        Gene-ref\r\n            Gene-ref_locus (Gene Name)\r\n            Gene-ref_desc (Description)\r\n            Gene-ref_syn\r\n                Gene-ref_syn_E (Synonyms)\r\n    Entrezgene_summary (Summary)\r\n    Entrezgene_comments\r\n        Gene-commentary\r\n            Gene-commentary_type (type of commentary)\r\n            Gene-commentary_heading (heading of commentary)\r\n            Gene-commentary_label (label of commentary)\r\n            Gene-commentary_text (GeneRIFs, if type == generif)\r\n            Gene-commentary_refs\r\n                Pub_pmid/PubMedId (PmIds)\r\n            Gene-commentary_products\r\n            Gene-commentary_comment\r\n                Gene-commentary_text (Pathways, if heading == Pathways)\r\n                Gene-commentary_comment\r\n                    (Interactions, if heading == Interactions)\r\n                    (Conserved Domains, if heading == Conserved Domains)\r\n                    (Function, if label == Function)\r\n                    (Component, if label == Component)\r\n                    (Process, if label == Process)\r\n                    NCBI Reference Sequences (RefSeq) (more commentaries)\r\n        Entrezgene_properties\r\n            Gene-commentary/Gene-commentary_comment\r\n        Entrezgene_prot\r\n            Prot-ref/Prot-ref_name\r\n                Prot-ref_name_E (Alternative Name)\r\n```\r\n\r\nHaving collected all the PubMed IDs from a gene entry (as above) Annokey then searches in the corresponding PubMed database entry. The diagram below illustrates the parts of the PubMed XML schema which are searched by Annokey. The parts marked with an asterisk indicate the fields of text where Annokey searches for key phrases.\r\n\r\n```\r\nPubmedArticle\r\n    MedlineCitation\r\n        Article\r\n            JournalTitle (*)\r\n            ArticleTitle (*)\r\n            Abstract\r\n                AbstractText (*)\r\n```\r\n\r\n###### The structure of the gene cache directory\r\n\r\nThe local cache of NCBI Gene database entries is structured as follows:\r\n\r\n    genecache\r\n        organism (e.g. human, mouse)\r\n            hash_dir (a numbered directory in the range [0,255])\r\n                gene_name (e.g. PALB2)\r\n                    gene_id (XML file, e.g 79728)\r\n\r\nAt the top level is the genecache directory. This has sub-directories for each organism. This has up to 256 sub-directories numbered 0 to 255. The purpose of these sub-directories is to spread out the stored gene information, so that we don't put all the gene files in one sub-directory. Some computer file systems exhibit poor performance when you put too many files in one directory.\r\n\r\nThe database records for each gene are stored underneath one of the 256 possible hash directories. The exact hash directory is determined by the formula:\r\n\r\n    md5(gene_name) % 256\r\n\r\nwhere `gene_name` is the (string) gene name (such as \"PALB2\"), md5 is a hash function and % is the modulus operator. We are only using md5 as a way to evenly distribute gene names to directories, so we don't care about its cryptographic properties (particularly its known weaknesses). \r\n\r\nFor example, the entry for PALB2 is calculated as follows:\r\n\r\n    md5(\"PALB2\") % 256 = 163\r\n\r\nWhich means that PALB2 will be found in genecache/human/163/PALB2/79728. The actual data is stored in the file called 79728, which is in XML format. The number 79728 is the NCBI Gene database ID of PALB2, which is also reflected in the URL to access the entry in the online database [http://www.ncbi.nlm.nih.gov/gene/79728](http://www.ncbi.nlm.nih.gov/gene/79728).\r\n\r\nAlso note that we normalise the gene name when it is stored in the cache to be all uppercase characters, which means we can reliably find the gene regardless of how it was written in the input gene file or stored in the NCBI database.\r\n\r\n###### The structure of the PubMed cache directory\r\n\r\nThe local cache of PubMed database entries is structured as follows:\r\n\r\n    pubmedcache\r\n        hash_dir (a numbered directory in the range [0,255])\r\n            PubMed ID (XML file, an integer)\r\n\r\nEach PubMed entry has a unique integer ID. Similar to the gene cache, we spread all entries across 256 sub-directories, using the formula:\r\n\r\n    md5(PudMed_ID) % 256\r\n\r\nEach PubMed entry is stored in an XML file whose name is equal to its PubMed ID.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}